<!--
  ~ Copyright (c) 2007-2011 by The Broad Institute of MIT and Harvard.  All Rights Reserved.
  ~
  ~ This software is licensed under the terms of the GNU Lesser General Public License (LGPL),
  ~ Version 2.1 which is available at http://www.opensource.org/licenses/lgpl-2.1.php.
  ~
  ~ THE SOFTWARE IS PROVIDED "AS IS." THE BROAD AND MIT MAKE NO REPRESENTATIONS OR
  ~ WARRANTES OF ANY KIND CONCERNING THE SOFTWARE, EXPRESS OR IMPLIED, INCLUDING,
  ~ WITHOUT LIMITATION, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
  ~ PURPOSE, NONINFRINGEMENT, OR THE ABSENCE OF LATENT OR OTHER DEFECTS, WHETHER
  ~ OR NOT DISCOVERABLE.  IN NO EVENT SHALL THE BROAD OR MIT, OR THEIR RESPECTIVE
  ~ TRUSTEES, DIRECTORS, OFFICERS, EMPLOYEES, AND AFFILIATES BE LIABLE FOR ANY DAMAGES
  ~ OF ANY KIND, INCLUDING, WITHOUT LIMITATION, INCIDENTAL OR CONSEQUENTIAL DAMAGES,
  ~ ECONOMIC DAMAGES OR INJURY TO PROPERTY AND LOST PROFITS, REGARDLESS OF WHETHER
  ~ THE BROAD OR MIT SHALL BE ADVISED, SHALL HAVE OTHER REASON TO KNOW, OR IN FACT
  ~ SHALL KNOW OF THE POSSIBILITY OF THE FOREGOING.
  -->

<project name="IGV" default="build" basedir="../.">
    <import file="../build.xml"/>

    <property name="alias" value="Broad-alias"/>
    <property name="key-password" value="Broad-keypass"/>
    <property name="store-password" value="Broad-storepass"/>

    <!-- The deployment folder for the JWS distribution. It is expected that this property will be overridden -->
    <property name="deploy.dir" value="${basedir}/deploy/"/>

    <!-- Src/binary archive file settings -->
    <property name="src.archive.name" value="IGVDistribution_${version}"/>
    <property name="src.archive.dest.dir" value="${basedir}"/>
    <property name="src.archive.zip" value="${src.archive.dest.dir}/${src.archive.name}.zip"/>

    <property name="bin.archive.name" value="IGV_${version}"/>
    <property name="bin.archive.zip" value="${bin.archive.name}.zip"/>

    <target name="init_old" depends="clean">
        <delete dir="${dist.dir}"/>

        <mkdir dir="${tmp.dir}"/>
        <mkdir dir="${dist.dir}"/>

        <!-- Copy resource files to the tmp directory -->
        <copy todir="${tmp.dir}" overwrite="true">
            <fileset dir="${src.dir}">
                <exclude name="**/*.form"/>
                <exclude name="**/*.java"/>
                <exclude name="**/*.svn"/>
                <exclude name="**/manifest.mf"/>
            </fileset>
        </copy>

        <!-- Unzip jars to the tmp directory -->
        <unzip dest="${tmp.dir}">
            <patternset>
                <include name="**/*"/>
                <exclude name="META-INF/**"/>
            </patternset>
            <fileset dir="${lib.dir}">
                <include name="**/*.jar"/>
                <exclude name="**/batik-codec.jar"/>
            </fileset>
        </unzip>

        <copy file="${lib.dir}batik-codec.jar" tofile="${dist.dir}batik-codec.jar" overwrite="true"/>

        <tstamp>
            <format property="timestamp" pattern="MM/dd/yyyy hh:mm aa"/>
        </tstamp>

        <echo message="Resource ${resource.dir}"/>
        <echo message="Version ${version}"/>
        <replace file="${resource.dir}about.properties" token="@VERSION" value="${version}"/>
        <replace file="${resource.dir}about.properties" token="@BUILD" value="${build-number}"/>
        <replace file="${resource.dir}about.properties" token="@TIMESTAMP" value="${timestamp}"/>
        <replace file="${resource.dir}about.properties" token="@DEFAULT_MASTER_RESOURCE_URL"
                 value="${data-server-url}"/>

    </target>

    <!-- Sign all jars if a keystore is defined -->
    <target name="sign-jars" if="keystore">
        <signjar jar="${jar.path}" alias="${alias}" keypass="${key-password}" storepass="${store-password}"
                 keystore="${keystore}"/>
        <signjar jar="${dist.dir}batik-codec.jar" alias="${alias}" keypass="${key-password}"
                 storepass="${store-password}" keystore="${keystore}"/>
    </target>

    <fileset id="scripts" dir="${scripts.dir}">
        <include name="igv.sh"/>
        <include name="igv.command"/>
        <include name="igv.bat"/>
    </fileset>

    <!-- Deploy the application -->
    <target name="deploy">
        <copy todir="${deploy.dir}" overwrite="true">
            <fileset dir="${dist.dir}">
                <include name="lib/**"/>
            </fileset>
            <fileset file="${dist.dir}${jar.name}"/>
            <fileset file="${dist.dir}batik-codec.jar"/>
        </copy>
    </target>

    <!--Macro for creating zipped archive, used by bin and src/bin-->
    <macrodef name="archive">
        <attribute name="bin.dir"/>
        <attribute name="zip.dest"/>
        <attribute name="update" default="no"/>

        <sequential>

        <mkdir dir="@{bin.dir}"/>

        <!-- Copy files to directory -->
        <copy todir="@{bin.dir}" file="${dist.dir}/igv.jar"/>
        <copy todir="@{bin.dir}" file="${dist.dir}/batik-codec.jar"/>

        <zip destfile="@{zip.dest}" update="@{update}">
            <zipfileset dir="@{bin.dir}" filemode="755">
                <include name="**/igv.sh"/>
                <include name="**/igv.command"/>
                <include name="**/igv.bat"/>
            </zipfileset>
            <zipfileset dir="@{bin.dir}">
                <exclude name="**/igv.sh"/>
                <exclude name="**/igv.command"/>
                <exclude name="**/igv.bat"/>
            </zipfileset>
        </zip>
        </sequential>
    </macrodef>

    <!--Create binary archive -->
    <target name="publishBin" depends="build">
        <delete file="${bin.archive.zip}"/>
        <delete dir="${tmp.dir}"/>

        <mkdir dir="${tmp.dir}/${bin.archive.name}"/>
        <copy todir="${tmp.dir}/${bin.archive.name}">
            <fileset dir="${docs.dir}/">
                <include name="readme.txt"/>
            </fileset>
            <fileset refid="scripts"/>
        </copy>

        <archive bin.dir="${tmp.dir}/${bin.archive.name}" zip.dest="${bin.archive.zip}"/>
    </target>


    <!--Create a src/binary archive -->
    <target name="publish" depends="build">

        <!-- Clean -->
        <delete dir="${tmp.dir}"/>
        <delete file="${src.archive.zip}"/>

        <!-- Copy scripts and docs -->
        <copy todir="${tmp.dir}/${src.archive.name}">
            <fileset file="build.xml"/>
            <fileset dir="${basedir}">
                <include name="docs/*"/>
                <exclude name="**/*hic*"/>
            </fileset>
            <fileset dir="${basedir}">
                <include name="scripts/*"/>
                <exclude name="**/*hic*"/>
            </fileset>
        </copy>

        <!-- Src and lib directory -->
        <copy todir="${tmp.dir}/${src.archive.name}/src">
            <fileset dir="${src.dir}"/>
        </copy>
        <replace file="${tmp.dir}/${src.archive.name}/build.xml" token="@version" value="${version}"/>
        <replace file="${tmp.dir}/${src.archive.name}/src/resources/about.properties" token="@VERSION"
                 value="${version}"/>
        <replace file="${tmp.dir}/${src.archive.name}/src/resources/about.properties" token="@BUILD"
                 value="${build-number}"/>
        <replace file="${tmp.dir}/${src.archive.name}/src/resources/about.properties" token="@TIMESTAMP"
                 value="${timestamp}"/>
        <replace file="${tmp.dir}/${src.archive.name}/src/resources/about.properties"
                 token="@DEFAULT_MASTER_RESOURCE_URL" value="${data-server-url}"/>
        <copy todir="${tmp.dir}/${src.archive.name}/lib">
            <fileset dir="${lib.dir}"/>
        </copy>


        <archive bin.dir="${tmp.dir}/${src.archive.name}" zip.dest="${src.archive.zip}" update="yes"/>
    </target>



    <target name="build-jws" depends="build">
        <antcall target="sign-jars"/>
    </target>

    <target name="all" depends="clean, init, build-jws, deploy, publish, publishBin"/>
    <target name="publishBoth" depends="publish, publishBin" />

</project>
