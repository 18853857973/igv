<!--
~ Copyright (c) 2007-2011 by The Broad Institute of MIT and Harvard.  All Rights Reserved.
~
~ This software is licensed under the terms of the GNU Lesser General Public License (LGPL),
~ Version 2.1 which is available at http://www.opensource.org/licenses/lgpl-2.1.php.
~
~ THE SOFTWARE IS PROVIDED "AS IS." THE BROAD AND MIT MAKE NO REPRESENTATIONS OR
~ WARRANTES OF ANY KIND CONCERNING THE SOFTWARE, EXPRESS OR IMPLIED, INCLUDING,
~ WITH LIMITATION, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
~ PURPOSE, NONINFRINGEMENT, OR THE ABSENCE OF LATENT OR OTHER DEFECTS, WHETHER
~ OR NOT DISCOVERABLE.  IN NO EVENT SHALL THE BROAD OR MIT, OR THEIR RESPECTIVE
~ TRUSTEES, DIRECTORS, OFFICERS, EMPLOYEES, AND AFFILIATES BE LIABLE FOR ANY DAMAGES
~ OF ANY KIND, INCLUDING, WITHOUT LIMITATION, INCIDENTAL OR CONSEQUENTIAL DAMAGES,
~ ECONOMIC DAMAGES OR INJURY TO PROPERTY AND LOST PROFITS, REGARDLESS OF WHETHER
~ THE BROAD OR MIT SHALL BE ADVISED, SHALL HAVE OTHER REASON TO KNOW, OR IN FACT
~ SHALL KNOW OF THE POSSIBILITY OF THE FOREGOING.
-->

<project name="IGV" default="all" basedir=".">

    <property name="jar.name" value="igv.jar"/>
    <property name="main-class" value="org.broad.igv.ui.Main"/>

    <!-- Source and lib directories -->
    <property name="src.dir" value="${basedir}/src/"/>
    <property name="lib.dir" value="${basedir}/lib/"/>
    <property name="testsrc.dir" value="${basedir}/test/src"/>
    <property name="testlib.dir" value="${basedir}/test/lib"/>

    <!-- Temp directory.  Sources are compiled here prior to archiving -->
    <property name="tmp.dir" value="${basedir}/tmp/"/>
    <property name="testtmp.dir" value="${basedir}/testtmp/"/>
    <property name="resource.dir" value="${tmp.dir}resources/"/>

    <!-- Distribution directory.  Binary distribution is placed here -->
    <property name="dist.dir" value="${basedir}"/>
    <property name="jar.path" value="${dist.dir}${jar.name}"/>
    <property name="dist.lib.dir" value="${dist.dir}lib/"/>

    <!-- build specific properties.  Generally set through Jenkins, command line, or properties file-->
    <property name="build-number" value="0"/>
    <property name="version" value="${build-number}"/>
    <property name="data-server-url" value="http://www.broadinstitute.org/igvdata/$$_dataServerRegistry.txt"/>


    <property name="scripts.dir" value="${basedir}/scripts"/>
    <property name="docs.dir" value="${basedir}/docs"/>

    <!-- Create class path for manifest -->
    <path id="@jars">
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <!-- Clean all generated artifacts -->
    <target name="clean">
        <delete dir="${tmp.dir}"/>
        <delete dir="${testtmp.dir}"/>
        <delete dir="${test.reports}"/>
    </target>

    <!-- Unzip jars to the tmp directory -->
    <target name="unziplibs" if="usebcel">
        <unzip dest="${tmp.dir}">
            <patternset>
                <include name="**/*"/>
                <exclude name="META-INF/**"/>
            </patternset>
            <fileset dir="${lib.dir}">
                <include name="**/*.jar"/>
                <exclude name="**/batik-codec.jar"/>
            </fileset>
        </unzip>
    </target>

    <target name="rewritelibpath" unless="usebcel">
        <pathconvert property="class-path" pathsep=" " dirsep="/" refid="@jars">
            <map from="${lib.dir}" to="lib/"/>
        </pathconvert>
    </target>

    <target name="prepare-libs" depends="unziplibs, rewritelibpath"/>

    <target name="init" depends="clean">
        <mkdir dir="${tmp.dir}"/>
        <mkdir dir="${testtmp.dir}"/>
        <mkdir dir="${test.reports}"/>
        <mkdir dir="${dist.dir}"/>

        <!-- Copy resource files to the tmp directory -->
        <copy todir="${tmp.dir}" overwrite="true">
            <fileset dir="${src.dir}">
                <exclude name="**/*.form"/>
                <exclude name="**/*.java"/>
                <exclude name="**/*.svn"/>
                <exclude name="**/manifest.mf"/>
            </fileset>
        </copy>

        <!--We could use this to check for availability, and use BCEL by default.
        Going to leave it up to the user though -->
        <!--condition property="usebcel">
            <and>
                <available classname="org.apache.tools.ant.util.depend.bcel.FullAnalyzer"/>
                <not><isset property="nobcel"/></not>
            </and>
        </condition-->
        <antcall target="prepare-libs"/>

        <tstamp>
            <format property="timestamp" pattern="MM/dd/yyyy hh:mm aa"/>
        </tstamp>

        <echo message="Resource ${resource.dir}"/>
        <echo message="Version ${version}"/>
        <replace file="${resource.dir}about.properties" token="@VERSION" value="${version}"/>
        <replace file="${resource.dir}about.properties" token="@BUILD" value="${build-number}"/>
        <replace file="${resource.dir}about.properties" token="@TIMESTAMP" value="${timestamp}"/>
        <replace file="${resource.dir}about.properties" token="@DEFAULT_MASTER_RESOURCE_URL"
                 value="${data-server-url}"/>

        <condition property="compile.tests">
            <and>
                <not>
                    <isset property="notests"/>
                </not>
                <available file="${testsrc.dir}" type="dir"/>
            </and>
        </condition>
    </target>

    <!-- We compile IGV and the tests separately, because we only want
    to include the main classes in the JAR and so it's easier to run
    tests later.. -->
    <target name="compile" depends="init" description="Compile main source files to temp directory">
        <javac srcdir="${src.dir}" debug="on" destdir="${tmp.dir}">
            <classpath>
                <pathelement path="${tmp.dir}"/>
                <pathelement path="${lib.dir}goby-io.jar"/>
            </classpath>
        </javac>
    </target>

    <target name="compileTests" if="compile.tests" description="Compile test files to testtmp directory">
        <javac srcdir="${testsrc.dir}" debug="on" destdir="${testtmp.dir}" includeantruntime="true">
            <classpath refid="test.classpath"/>
        </javac>
    </target>

    <fileset dir="${tmp.dir}" id="requiredClasses"/>
    <target name="determineInclude" if="usebcel" description="Determine which classes to include.
    If usbcel property is set, this uses BCEL to determine the minimum set of required classes.">
        <classfileset dir="${tmp.dir}" id="requiredClasses">
            <root classname="${main-class}"/>
        </classfileset>
    </target>

    <target name="build" depends="compile, determineInclude"
            description="Build the IGV JAR">
        <jar destfile="${jar.path}" basedir="${tmp.dir}" compress="true" duplicate="preserve">
            <fileset refid="requiredClasses"/>
            <manifest>
                <attribute name="Class-Path" value="batik-codec.jar"/>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Main-Class" value="${main-class}"/>
            </manifest>
        </jar>
        <copy file="${lib.dir}batik-codec.jar" tofile="${dist.dir}batik-codec.jar" overwrite="true"/>
    </target>

    <target name="all" depends="build, clean"/>

    <!-- Run all tests with ant. Work in progress. -->
    <path id="test.classpath">
        <path refid="@jars"/>
        <pathelement location="${testtmp.dir}"/>
        <pathelement location="${tmp.dir}"/>
    </path>

    <property name="test.reports" value="${basedir}/reports"/>
    <property name="LARGE_DATA_DIR" value="${basedir}/test/largedata"/>

    <fileset dir="${testtmp.dir}" id="allfileset">
        <include name="**/*.class"/>
        <exclude name="**/*$*.class"/>
    </fileset>

    <fileset dir="${testtmp.dir}" id="uifileset">
        <include name="**/IGVTest.class"/>
        <include name="**/TrackLoaderTest.class"/>
        <exclude name="**/*$*.class"/>
    </fileset>

    <!-- This looks a bit complicated but there is logic to it. We define this target
     to be run by any other test runners, after they define an appropriate fileset.
     We define files of tests to be run above (allfileset and uifileset), one
     can also define their own by setting the filesetpattern property.
     e.g.
     >ant tests
     runs all tests
     >ant -Dfilesetpattern *BED* tests
     would run any test with BED in the file name.
     >ant -Dfilesetpattern IGVToolsTest tests
     would simply run IGVToolsTest.
     -->
    <target name="actruntests" depends="compile, compileTests">
        <junit haltonfailure="no" showoutput="no" printsummary="yes" failureproperty="tests.failed" maxmemory="750m">
            <jvmarg value="-javaagent:${testlib.dir}/RuntimeUtils.jar"/>
            <sysproperty key="LARGE_DATA_DIR" value="${LARGE_DATA_DIR}"/>
            <classpath refid="test.classpath"/>
            <formatter type="xml" usefile="true"/>
            <batchtest fork="yes" todir="${test.reports}" if="filesetpattern">
                <fileset dir="${testtmp.dir}">
                    <include name="**/${filesetpattern}.class"/>
                    <exclude name="**/*$*.class"/>
                </fileset>
            </batchtest>
            <batchtest fork="yes" todir="${test.reports}" unless="filesetpattern">
                <fileset refid="${filesetid}"/>
            </batchtest>
        </junit>

    </target>

    <target name="makereports" depends="actruntests">
        <junitreport todir="${test.reports}">
            <fileset dir="${test.reports}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report todir="${test.reports}"/>
        </junitreport>
        <fail message="Test failure detected, check test results." if="tests.failed"/>
    </target>

    <target name="tests">
        <antcall target="makereports">
            <param name="filesetid" value="allfileset"/>
        </antcall>
    </target>

    <target name="uitests">
        <antcall target="makereports">
            <param name="filesetid" value="uifileset"/>
        </antcall>
    </target>

</project>
